package service

import (
	"Notification_Service/internal/models"
	"fmt"
	"log"
)

type MockEmailService struct {
	fromEmail string
}

func NewMockEmailService(fromEmail string) *MockEmailService {
	return &MockEmailService{
		fromEmail: fromEmail,
	}
}

func (e *MockEmailService) SendEmail(notification models.EmailNotification) error {
	log.Printf("üìß [MOCK EMAIL] To: %s", notification.To)
	log.Printf("üìß [MOCK EMAIL] Subject: %s", notification.Subject)
	log.Printf("üìß [MOCK EMAIL] Body: %s", notification.Body)
	log.Printf("üìß [MOCK EMAIL] Email sent successfully!")

	return nil
}

func (e *MockEmailService) CreateOrderNotificationEmail(orderEvent models.OrderEvent, userInfo models.UserInfo) models.EmailNotification {
	var subject, body string

	switch orderEvent.EventType {
	case "order_created":
		if userInfo.Role == "supplier" {
			subject = fmt.Sprintf("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #%d", orderEvent.OrderID)
			body = "–£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: " + orderEvent.ProductName
		} else {
			subject = fmt.Sprintf("–ó–∞–∫–∞–∑ #%d –æ—Ñ–æ—Ä–º–ª–µ–Ω", orderEvent.OrderID)
			body = "–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ " + orderEvent.ProductName + " —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω"
		}

	case "order_status_updated":
		subject = fmt.Sprintf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #%d", orderEvent.OrderID)
		body = "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞: " + orderEvent.Status

	default:
		subject = fmt.Sprintf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #%d", orderEvent.OrderID)
		body = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
	}

	return models.EmailNotification{
		To:      userInfo.Email,
		Subject: subject,
		Body:    body,
		HTML:    false,
	}
}

func (m *MockEmailService) CreatePaymentCompletedNotificationEmail(orderEvent models.OrderEvent, userInfo models.UserInfo) models.EmailNotification {
	subject := fmt.Sprintf("–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #%d —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", orderEvent.OrderID)
	body := fmt.Sprintf("–£–≤–∞–∂–∞–µ–º—ã–π %s,\n\n–í–∞—à –∑–∞–∫–∞–∑ #%d —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
		userInfo.Username, orderEvent.OrderID)

	return models.EmailNotification{
		To:      userInfo.Email,
		Subject: subject,
		Body:    body,
		HTML:    false,
	}
}

func (m *MockEmailService) CreatePaymentRequiredNotificationEmail(orderEvent models.OrderEvent, userInfo models.UserInfo) models.EmailNotification {
	subject := fmt.Sprintf("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #%d", orderEvent.OrderID)
	body := fmt.Sprintf("–£–≤–∞–∂–∞–µ–º—ã–π %s,\n\n–î–ª—è –∑–∞–∫–∞–∑–∞ #%d —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ %.2f —Ä—É–±.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ.",
		userInfo.Username, orderEvent.OrderID, orderEvent.Amount)

	return models.EmailNotification{
		To:      userInfo.Email,
		Subject: subject,
		Body:    body,
		HTML:    false,
	}
}
