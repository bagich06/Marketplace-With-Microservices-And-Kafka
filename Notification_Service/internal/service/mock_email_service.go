package service

import (
	"Notification_Service/internal/models"
	"log"
)

type MockEmailService struct {
	fromEmail string
}

func NewMockEmailService(fromEmail string) *MockEmailService {
	return &MockEmailService{
		fromEmail: fromEmail,
	}
}

func (e *MockEmailService) SendEmail(notification models.EmailNotification) error {
	log.Printf("üìß [MOCK EMAIL] To: %s", notification.To)
	log.Printf("üìß [MOCK EMAIL] Subject: %s", notification.Subject)
	log.Printf("üìß [MOCK EMAIL] Body: %s", notification.Body)
	log.Printf("üìß [MOCK EMAIL] Email sent successfully!")

	return nil
}

func (e *MockEmailService) CreateOrderNotificationEmail(orderEvent models.OrderEvent, userInfo models.UserInfo) models.EmailNotification {
	var subject, body string

	switch orderEvent.EventType {
	case "order_created":
		if userInfo.Role == "supplier" {
			subject = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #" + string(rune(orderEvent.OrderID))
			body = "–£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: " + orderEvent.ProductName
		} else {
			subject = "–ó–∞–∫–∞–∑ #" + string(rune(orderEvent.OrderID)) + " –æ—Ñ–æ—Ä–º–ª–µ–Ω"
			body = "–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ " + orderEvent.ProductName + " —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω"
		}

	case "order_status_updated":
		subject = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #" + string(rune(orderEvent.OrderID))
		body = "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞: " + orderEvent.Status

	default:
		subject = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #" + string(rune(orderEvent.OrderID))
		body = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
	}

	return models.EmailNotification{
		To:      userInfo.Email,
		Subject: subject,
		Body:    body,
		HTML:    false,
	}
}
